#!/usr/bin/env ruby
#

# Cloud Foundry 2012.02.03 Beta
# Copyright (c) [2009-2012] VMware, Inc. All Rights Reserved. 
# 
# This product is licensed to you under the Apache License, Version 2.0 (the "License").  
# You may not use this product except in compliance with the License.  
# 
# This product includes a number of subcomponents with
# separate copyright notices and license terms. Your use of these
# subcomponents is subject to the terms and conditions of the 
# subcomponent's license, as noted in the LICENSE file. 

ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../../Gemfile", __FILE__)

require "rubygems"
require "bundler/setup"

$:.unshift(File.expand_path("../../lib", __FILE__))
$:.unshift(File.expand_path("../../lib/acm", __FILE__))
$:.unshift(File.expand_path("../../lib/acm/models", __FILE__))

require "config"
require "thin"

config_file = nil

opts = OptionParser.new do |opts|
  opts.on("-c", "--config [ARG]", "Configuration File") do |opt|
    config_file = opt
  end
end

opts.parse!(ARGV.dup)

config_file ||= ::File.expand_path("../../config/acm.yml", __FILE__)
config = YAML.load_file(config_file)

ACM::Config.configure(config)

event_thread = Thread.new { EM.run }

EM.error_handler do |e|
  ACM::Config.logger.error "Eventmachine problem, #{e}"
  ACM::Config.logger.error(e)
  # Fail fast
  STDERR.puts "Eventmachine problem, #{e}"
  exit 1
end

require "acm_controller"
require "vcap/component"
require "vcap/common"
require "utils"

if config["mbus"]
  NATS.on_error do |e|
    if e.kind_of? NATS::ConnectError
      ACM::Config.logger.error("EXITING! NATS connection failed: #{e}")
      ACM::Config.logger.error(e)

      # Fail fast
      STDERR.puts("EXITING! NATS connection failed: #{e}")
      exit!
    else
      ACM::Config.logger.error("NATS problem, #{e}")
      ACM::Config.logger.error(e)
    end
  end

  EM.next_tick do
    NATS.start(:uri => config["mbus"]) do
      VCAP::Component.register(:type => "ACM",
                               :index => config[:index] || 0,
                               :config => config,
                               :logger => ACM::Config.logger)

      ACM::Config.logger.debug "varz #{VCAP::Component.varz[:host]} #{VCAP::Component.varz[:credentials]}}"
      VCAP::Component.varz[:requests] = 0
      VCAP::Component.varz[:requests_per_sec] = 0
      VCAP::Component.varz[:revision] = ACM::Config.revision
      ACM::Varz.setup_updates
    end
  end
end

thin_server = Thin::Server.new("0.0.0.0", config["port"], :signals => false) do
  use Rack::CommonLogger
  map "/" do
    run ACM::Controller::ACMController.new
  end
end

["TERM", "INT", "QUIT"].each do |signal|
  trap(signal) do
    ACM::Config.logger.info "Shutting down"
    thin_server.stop!
    EM.stop
  end
end

thin_server.start!
event_thread.join
